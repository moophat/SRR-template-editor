# Shared Resource Sync System

## ‚úÖ Summary of Requirements

- Shared Jinja2 / TextFSM / JSNAPy files should be reusable across multiple repos.
- Consumers (monorepo, new-repo, etc.) can both push changes upstream and receive updates downstream.
- Full automation preferred: no manual `git subtree` usage.
- Must retain GitHub-native visibility (PRs, reviews).
- Internet access disabled post-installation ‚Üí no runtime fetch.
- GitHub Actions will orchestrate the entire sync flow.
- Supports **per-folder selective syncing**: each consumer can map only specific folders from shared repo, and place them at arbitrary target paths.

---

## ‚ùó Pain Points (Past)

- Subtree required manual split/push/pull per dev.
- Submodule caused detached worktrees, CI breakage, and user confusion.
- No clean audit trail of shared resource changes across repos.
- Lack of auto-propagation from shared repo to consumers after updates.
- Cannot support repo-specific folder layouts (e.g., some use `resources/folderX`, others `templates/folderX`).

---

## ‚úÖ Final Architecture

### 1. Upstream Propagation (Consumer ‚Üí Shared)

- Consumer repo has GitHub Action (`push-upstream.yml`):
  - `git subtree split` on local folder (e.g., `resources/folderX`)
  - `push` to branch `from-consumerX-folderX` in `shared-resources-repo`
  - Commits tagged as user commits unless `[auto-sync]` is present
- Shared repo Action (`merge-from-consumer.yml`):
  - Triggered on push to `from-consumerX-*`
  - Opens PR into `main`
  - Auto-merges if:
    - No conflict
    - CI passes

### 2. Downstream Propagation (Shared ‚Üí Consumers)

- On merge to `main` in `shared-resources-repo`:
  - `populate-downstream.yml` reads `consumer-config.yml`
  - For each `(consumer, folder)`:
    - `subtree split` on `folder`
    - Push to `sync-folderX` branch of consumer repo
    - Commit message must include `[auto-sync][consumerX]`
- Consumer repo Action (`auto-pr-downstream.yml`):
  - Triggered on push to `sync-folderX`
  - Opens PR into `main`, labeled `auto-sync`
  - Maintainer reviews and merges

### 3. Loop Avoidance

- Upstream Action skips pushing commits that contain `[auto-sync]` in message
- Downstream Action may skip pushing back to the consumer that originated the latest commit to avoid PR churn (optional ‚Äî not required due to subtree safety)

---

## üß© GitHub Actions Required

**In shared-resources-repo**
- `populate-downstream.yml`
- `merge-from-consumer.yml`

**In each consumer repo**
- `auto-pr-downstream.yml`
- `push-upstream.yml`

---

## üîñ Commit Message Convention

- Downstream commits: `[auto-sync][consumerX] update folderY`
- Used for loop prevention and traceability

---

## üß† Notes

- `consumer-config.yml` defines which folders are synced per consumer, and where:

    consumer-a:
      repo: git@github.com:teamA/consumer-a.git
      folders:
        folder1: resources/folder1
        folder2: templates/folder2

- All syncs initiated via CI
- No local Git commands or subtree handling by devs
- Only `shared-resources-repo` needs PAT for pushing to consumers
- Scales to many consumers, with custom folder mappings

---

## ‚öôÔ∏è Ready for D2 Rendering
